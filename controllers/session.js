/**
 * @module
 * Manages session resource
 *
 * @since 2013-03
 * @author Rafael Almeida Erthal Hermano
 */
var router, nconf, auth, User;

router = require('express').Router();

nconf  = require('nconf');
auth   = require('../lib/auth');
User   = require('../models/user');

/**
 * @method
 * @summary Creates a new user in database
 * Every user is created as a anonymous user in the database, and the only initial information of the user is _id
 * generated by the database and password. If is a anonymous login, the client should keep the userId and generate a
 * password for future login.
 *
 * @param request
 * @param request.password
 * @param response
 *
 * @returns 201 user
 * @throws 500 error
 *
 * @since 2013-03
 * @author Rafael Almeida Erthal Hermano
 */
router.post('/', function (request, response) {
    'use strict';

    var user;
    user = new User({
        'password' : request.param('password')
    });

    user.save(function (error) {
        if (error) {response.send(500, error);}
        response.send(201, user);
    });
});

/**
 * @method
 * @summary Login user
 * There are two forms of login, anonymous user login and registered user login. If is an anonymous user login the API
 * call should contain the _id and password of the user, and if is a registered user login the API call should contain
 * the email and the password of the user.
 *
 * @param request
 * @param request.password
 * @param request.email
 * @param request._id
 * @param response
 *
 * @returns 200 token
 * @throws 403 invalid username or password
 *
 * @since 2013-03
 * @author Rafael Almeida Erthal Hermano
 */
router.get('/me/session', function (request, response) {
    'use strict';

    var query, password, email, _id;
    email    = request.param('email');
    _id      = request.param('_id');
    password = request.param('password');
    query    = User.findByPassword(password);

    if (email) {
        query.where('email').equals(email);
    } else {
        query.where('_id').equals(_id);
    }
    query.exec(function (error, user) {
        if (error) {response.send(500, error);}
        if (!user) {response.send(403, 'invalid username or password');}
        response.send(200, {token : auth.token(user)});
    });
});

module.exports = router;